
# Generated by CodiumAI

import pytest

class TestExportToJson:

    #  The function successfully connects to the specified database and retrieves data from the specified table.
    def test_connects_to_database_and_retrieves_data(self):
        # Arrange
        db_name = "test.db"
        table_name = "test_table"
        output_filename = "output.json"
        selected_columns = ["column1", "column2"]
    
        # Act
        export_to_json(db_name, table_name, output_filename, selected_columns)
    
        # Assert
        # Check if the file exists
        assert os.path.exists(output_filename)
        # Check if the file is not empty
        assert os.path.getsize(output_filename) > 0
        # Check if the file contains the expected data
        with open(output_filename, 'r') as json_file:
            data = json.load(json_file)
            assert len(data) > 0
            assert all(column in data[0] for column in selected_columns)
        # Clean up
        os.remove(output_filename)

    #  The function successfully exports the retrieved data to a JSON file with the specified output filename.
    def test_exports_data_to_json_file(self):
        # Arrange
        db_name = "test.db"
        table_name = "test_table"
        output_filename = "output.json"
    
        # Act
        export_to_json(db_name, table_name, output_filename)
    
        # Assert
        # Check if the file exists
        assert os.path.exists(output_filename)
        # Check if the file is not empty
        assert os.path.getsize(output_filename) > 0
        # Clean up
        os.remove(output_filename)

    #  The function successfully exports all columns of the specified table when no selected columns are specified.
    def test_exports_all_columns_when_no_selected_columns(self):
        # Arrange
        db_name = "test.db"
        table_name = "test_table"
        output_filename = "output.json"
    
        # Act
        export_to_json(db_name, table_name, output_filename)
    
        # Assert
        # Check if the file exists
        assert os.path.exists(output_filename)
        # Check if the file is not empty
        assert os.path.getsize(output_filename) > 0
        # Clean up
        os.remove(output_filename)

    #  The specified database does not exist.
    def test_database_does_not_exist(self):
        # Arrange
        db_name = "nonexistent.db"
        table_name = "test_table"
        output_filename = "output.json"
    
        # Act and Assert
        with pytest.raises(sqlite3.OperationalError):
            export_to_json(db_name, table_name, output_filename)

    #  The specified table does not exist in the specified database.
    def test_table_does_not_exist(self):
        # Arrange
        db_name = "test.db"
        table_name = "nonexistent_table"
        output_filename = "output.json"
    
        # Act and Assert
        with pytest.raises(sqlite3.OperationalError):
            export_to_json(db_name, table_name, output_filename)

    #  The specified selected columns do not exist in the specified table.
    def test_selected_columns_do_not_exist(self):
        # Arrange
        db_name = "test.db"
        table_name = "test_table"
        output_filename = "output.json"
        selected_columns = ["nonexistent_column"]
    
        # Act and Assert
        with pytest.raises(pd.io.sql.DatabaseError):
            export_to_json(db_name, table_name, output_filename, selected_columns)
