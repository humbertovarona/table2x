
# Generated by CodiumAI

import pytest

class TestExportToWord:

    #  The function exports data from a specified table in a given database to a Word document.
    def test_export_data_from_table(self):
        # Arrange
        db_name = "test.db"
        table_name = "employees"
        output_filename = "output.docx"
    
        # Act
        export_to_word(db_name, table_name, output_filename)
    
        # Assert
        # Check if the output file exists
        assert os.path.exists(output_filename)
        # Check if the output file is a Word document
        assert output_filename.endswith(".docx")

    #  The function creates a table in the Word document with column names and data from the database.
    def test_create_table_with_column_names_and_data(self):
        # Arrange
        db_name = "test.db"
        table_name = "employees"
        output_filename = "output.docx"
    
        # Act
        export_to_word(db_name, table_name, output_filename)
    
        # Assert
        # Check if the table exists in the Word document
        doc = Document(output_filename)
        tables = doc.tables
        assert len(tables) == 1
        table = tables[0]
    
        # Check if the number of columns in the table matches the number of columns in the database table
        conn = sqlite3.connect(db_name)
        cursor = conn.cursor()
        cursor.execute(f"PRAGMA table_info({table_name})")
        columns_info = cursor.fetchall()
        assert len(table.columns) == len(columns_info)
    
        # Check if the column names in the table match the column names in the database table
        for i, column_info in enumerate(columns_info):
            assert table.cell(0, i).text == column_info[1]
    
        # Check if the data in the table matches the data in the database table
        cursor.execute(f"SELECT * FROM {table_name}")
        data = cursor.fetchall()
        for i, row in enumerate(data):
            for j, cell_value in enumerate(row):
                assert table.cell(i+1, j).text == str(cell_value)
    
        conn.close()

    #  The function saves the Word document with a specified filename.
    def test_save_word_document_with_specified_filename(self):
        # Arrange
        db_name = "test.db"
        table_name = "employees"
        output_filename = "output.docx"
    
        # Act
        export_to_word(db_name, table_name, output_filename)
    
        # Assert
        # Check if the output file exists
        assert os.path.exists(output_filename)

    #  The specified database or table does not exist.
    def test_nonexistent_database_or_table(self):
        # Arrange
        db_name = "nonexistent.db"
        table_name = "nonexistent_table"
        output_filename = "output.docx"
    
        # Act and Assert
        with pytest.raises(sqlite3.OperationalError):
            export_to_word(db_name, table_name, output_filename)

    #  The specified output filename is invalid or the user does not have permission to write to the specified location.
    def test_invalid_output_filename_or_permission(self):
        # Arrange
        db_name = "test.db"
        table_name = "employees"
        output_filename = "/invalid/filename.docx"
    
        # Act and Assert
        with pytest.raises(IOError):
            export_to_word(db_name, table_name, output_filename)

    #  The specified columns do not exist in the specified table.
    def test_nonexistent_columns(self):
        # Arrange
        db_name = "test.db"
        table_name = "employees"
        output_filename = "output.docx"
        selected_columns = ["nonexistent_column"]
    
        # Act and Assert
        with pytest.raises(pd.io.sql.DatabaseError):
            export_to_word(db_name, table_name, output_filename, selected_columns)
