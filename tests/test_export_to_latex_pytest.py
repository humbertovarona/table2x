
# Generated by CodiumAI

import pytest

class TestExportToLatex:

    #  The function exports a table from a SQLite database to a LaTeX file.
    def test_exports_table_to_latex(self):
        # Arrange
        db_name = "test.db"
        table_name = "test_table"
        output_filename = "output.tex"
        conn = sqlite3.connect(db_name)
        conn.execute("CREATE TABLE test_table (id INT, name TEXT)")
        conn.execute("INSERT INTO test_table VALUES (1, 'John')")
        conn.execute("INSERT INTO test_table VALUES (2, 'Jane')")
        conn.commit()
    
        # Act
        export_to_latex(db_name, table_name, output_filename)
    
        # Assert
        with open(output_filename, 'r') as latex_file:
            latex_content = latex_file.read()
            assert "1" in latex_content
            assert "John" in latex_content
            assert "2" in latex_content
            assert "Jane" in latex_content
        
        conn.close()
        os.remove(output_filename)

    #  The function exports all columns if no columns are specified.
    def test_exports_all_columns_if_none_specified(self):
        # Arrange
        db_name = "test.db"
        table_name = "test_table"
        output_filename = "output.tex"
        conn = sqlite3.connect(db_name)
        conn.execute("CREATE TABLE test_table (id INT, name TEXT)")
        conn.execute("INSERT INTO test_table VALUES (1, 'John')")
        conn.execute("INSERT INTO test_table VALUES (2, 'Jane')")
        conn.commit()
    
        # Act
        export_to_latex(db_name, table_name, output_filename)
    
        # Assert
        with open(output_filename, 'r') as latex_file:
            latex_content = latex_file.read()
            assert "id" in latex_content
            assert "name" in latex_content
            assert "1" in latex_content
            assert "John" in latex_content
            assert "2" in latex_content
            assert "Jane" in latex_content
        
        conn.close()
        os.remove(output_filename)

    #  The function exports only selected columns if specified.
    def test_exports_selected_columns_if_specified(self):
        # Arrange
        db_name = "test.db"
        table_name = "test_table"
        output_filename = "output.tex"
        conn = sqlite3.connect(db_name)
        conn.execute("CREATE TABLE test_table (id INT, name TEXT, age INT)")
        conn.execute("INSERT INTO test_table VALUES (1, 'John', 25)")
        conn.execute("INSERT INTO test_table VALUES (2, 'Jane', 30)")
        conn.commit()
    
        # Act
        export_to_latex(db_name, table_name, output_filename, selected_columns=["name", "age"])
    
        # Assert
        with open(output_filename, 'r') as latex_file:
            latex_content = latex_file.read()
            assert "name" in latex_content
            assert "age" in latex_content
            assert "John" in latex_content
            assert "25" in latex_content
            assert "Jane" in latex_content
            assert "30" in latex_content
        
        conn.close()
        os.remove(output_filename)

    #  The database file does not exist.
    def test_database_file_does_not_exist(self):
        # Arrange
        db_name = "nonexistent.db"
        table_name = "test_table"
        output_filename = "output.tex"
    
        # Act and Assert
        with pytest.raises(sqlite3.OperationalError):
            export_to_latex(db_name, table_name, output_filename)

    #  The table does not exist in the database.
    def test_table_does_not_exist(self):
        # Arrange
        db_name = "test.db"
        table_name = "nonexistent_table"
        output_filename = "output.tex"
        conn = sqlite3.connect(db_name)
    
        # Act and Assert
        with pytest.raises(sqlite3.OperationalError):
            export_to_latex(db_name, table_name, output_filename)
        
        conn.close()

    #  The selected columns do not exist in the table.
    def test_selected_columns_do_not_exist(self):
        # Arrange
        db_name = "test.db"
        table_name = "test_table"
        output_filename = "output.tex"
        conn = sqlite3.connect(db_name)
        conn.execute("CREATE TABLE test_table (id INT, name TEXT)")
        conn.execute("INSERT INTO test_table VALUES (1, 'John')")
        conn.execute("INSERT INTO test_table VALUES (2, 'Jane')")
        conn.commit()
    
        # Act and Assert
        with pytest.raises(pd.core.computation.ops.UndefinedVariableError):
            export_to_latex(db_name, table_name, output_filename, selected_columns=["age"])
        
        conn.close()
