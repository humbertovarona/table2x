
# Generated by CodiumAI

import pytest

class TestExportToCsv:

    #  The function exports data from a given SQLite database table to a CSV file.
    def test_export_all_columns(self):
        # Arrange
        db_name = "test.db"
        table_name = "my_table"
        output_filename = "output.csv"
        conn = sqlite3.connect(db_name)
        conn.execute("CREATE TABLE my_table (id INT, name TEXT)")
        conn.execute("INSERT INTO my_table VALUES (1, 'John')")
        conn.execute("INSERT INTO my_table VALUES (2, 'Jane')")
        conn.commit()
    
        # Act
        export_to_csv(db_name, table_name, output_filename)
    
        # Assert
        df = pd.read_csv(output_filename)
        assert len(df) == 2
        assert list(df.columns) == ['id', 'name']
        assert list(df['id']) == [1, 2]
        assert list(df['name']) == ['John', 'Jane']
    
        # Clean up
        conn.execute("DROP TABLE my_table")
        conn.close()
        os.remove(output_filename)

    #  The function exports all columns of the table if no specific columns are selected.
    def test_export_all_columns_no_selected_columns(self):
        # Arrange
        db_name = "test.db"
        table_name = "my_table"
        output_filename = "output.csv"
        conn = sqlite3.connect(db_name)
        conn.execute("CREATE TABLE my_table (id INT, name TEXT)")
        conn.execute("INSERT INTO my_table VALUES (1, 'John')")
        conn.execute("INSERT INTO my_table VALUES (2, 'Jane')")
        conn.commit()
    
        # Act
        export_to_csv(db_name, table_name, output_filename, selected_columns=None)
    
        # Assert
        df = pd.read_csv(output_filename)
        assert len(df) == 2
        assert list(df.columns) == ['id', 'name']
        assert list(df['id']) == [1, 2]
        assert list(df['name']) == ['John', 'Jane']
    
        # Clean up
        conn.execute("DROP TABLE my_table")
        conn.close()
        os.remove(output_filename)

    #  The function exports only selected columns of the table if specific columns are selected.
    def test_export_selected_columns(self):
        # Arrange
        db_name = "test.db"
        table_name = "my_table"
        output_filename = "output.csv"
        conn = sqlite3.connect(db_name)
        conn.execute("CREATE TABLE my_table (id INT, name TEXT, age INT)")
        conn.execute("INSERT INTO my_table VALUES (1, 'John', 25)")
        conn.execute("INSERT INTO my_table VALUES (2, 'Jane', 30)")
        conn.commit()
    
        # Act
        export_to_csv(db_name, table_name, output_filename, selected_columns=['name', 'age'])
    
        # Assert
        df = pd.read_csv(output_filename)
        assert len(df) == 2
        assert list(df.columns) == ['name', 'age']
        assert list(df['name']) == ['John', 'Jane']
        assert list(df['age']) == [25, 30]
    
        # Clean up
        conn.execute("DROP TABLE my_table")
        conn.close()
        os.remove(output_filename)

    #  The function raises an error if the given database name is invalid.
    def test_invalid_database_name(self):
        # Arrange
        db_name = "invalid.db"
        table_name = "my_table"
        output_filename = "output.csv"
    
        # Act and Assert
        with pytest.raises(sqlite3.OperationalError):
            export_to_csv(db_name, table_name, output_filename)

    #  The function raises an error if the given table name is invalid.
    def test_invalid_table_name(self):
        # Arrange
        db_name = "test.db"
        table_name = "invalid_table"
        output_filename = "output.csv"
        conn = sqlite3.connect(db_name)
    
        # Act and Assert
        with pytest.raises(sqlite3.OperationalError):
            export_to_csv(db_name, table_name, output_filename)
    
        # Clean up
        conn.close()

    #  The function raises an error if the selected columns do not exist in the table.
    def test_invalid_selected_columns(self):
        # Arrange
        db_name = "test.db"
        table_name = "my_table"
        output_filename = "output.csv"
        conn = sqlite3.connect(db_name)
        conn.execute("CREATE TABLE my_table (id INT, name TEXT)")
        conn.execute("INSERT INTO my_table VALUES (1, 'John')")
        conn.execute("INSERT INTO my_table VALUES (2, 'Jane')")
        conn.commit()
    
        # Act and Assert
        with pytest.raises(pd.core.computation.ops.UndefinedVariableError):
            export_to_csv(db_name, table_name, output_filename, selected_columns=['age'])
    
        # Clean up
        conn.execute("DROP TABLE my_table")
        conn.close()
